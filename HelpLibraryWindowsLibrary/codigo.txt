#region Variables



        private TypeDb DatabaseCurrent;

        private string cadenaDeConexion;

        private string pathDatabase;

        private string dsn = "MS Odbc Database";

        private bool isConected = false;

        connection;

        #endregion

        #region Propiedades

        public bool IsConected => isConected;

        public OdbcConnection Connection { get => connection; set => connection = value; }

        public string Dsn
        {
            get
            {
                return dsn;
            }
            set
            {

                if (!string.IsNullOrEmpty(value))
                {
                    if (!string.IsNullOrEmpty(cadenaDeConexion) && string.IsNullOrEmpty(dsn))
                    {
                        CadenaDeConexion = cadenaDeConexion.Replace(dsn, value);

                    }
                    else if (!string.IsNullOrEmpty(pathDatabase))
                    {
                        CadenaDeConexion = string.Format("Dsn={0};dbq={1}", value, pathDatabase);

                    }
                    else
                    {
                        dsn = value;
                    }

                }
            }
        }

        public string CadenaDeConexion
        {
            get
            {
                if (!string.IsNullOrEmpty(cadenaDeConexion))
                {
                    return cadenaDeConexion;
                }
                else
                {
                    return string.Format("Dsn={{0}};dbq={1}", Dsn, pathDatabase);
                }

            }
            set
            {

                try
                {
                    Connection = new OdbcConnection(value);
                    Connection.Open();
                    cadenaDeConexion = value;
                    int startProvider = value.IndexOf('=');
                    int endProvider = value.IndexOf(';');
                    int startPath = value.IndexOf('=', endProvider);
                    int cadenaLength = value.Length;
                    dsn = value.Substring(startProvider + 1, (endProvider - startProvider) - 1);
                    pathDatabase = value.Substring(startPath + 1, (cadenaLength - startPath) - 1);




                }
                catch (Exception Error)
                {
                    Connection = null;

                    new HelpLibraryLog(Error, this);
                    throw Error;
                }
                finally
                {
                    if (connection != null)
                    {
                        Connection.Close();
                    }

                }



            }
        }

        public string PathDataBase
        {
            get
            {
                return pathDatabase;
            }
            set
            {
                if (!string.IsNullOrEmpty(value))
                {
                    if (!string.IsNullOrEmpty(cadenaDeConexion) && string.IsNullOrEmpty(pathDatabase))
                    {
                        CadenaDeConexion = cadenaDeConexion.Replace(pathDatabase, value);

                    }
                    else if (!string.IsNullOrEmpty(dsn))
                    {
                        CadenaDeConexion = string.Format("Dsn={0};dbq={1}", dsn, value);

                    }

                    pathDatabase = value;

                }

            }
        }
        #endregion

        #region Constructores

        public DatabaseInteractions(OdbcConnection Connection, TypeDb database = TypeDb.Odbc)
        {
            this.connection = Connection;
            DatabaseCurrent = database;
            cadenaDeConexion = connection.ConnectionString;
            try
            {
                connection.Open();
                isConected = true;
            }
            catch (Exception C1)
            {

                new HelpLibraryLog(C1, this);
                throw C1;

            }
            finally
            {
                if (connection != null)
                {
                    connection.Close();
                }
            }

        }

        public DatabaseInteractions(TypeDb database = TypeDb.Odbc)
        {
            DatabaseCurrent = database;
            isConected = false;

        }

        public DatabaseInteractions(string CadenaDeConexion, TypeDb database = TypeDb.Odbc)
        {
            this.CadenaDeConexion = CadenaDeConexion;

        }
        #endregion


        #region Funciones

        public void Close()
        {
            if (Connection != null)
            {
                Connection.Close();
                isConected = false;
            }
        }


        public bool Conectar(bool isAutomatico = true)
        {


            if (!isAutomatico)
            {
                if (!string.IsNullOrWhiteSpace(this.dsn) || !string.IsNullOrWhiteSpace(this.pathDatabase))
                {
                    try
                    {
                        Connection = new OdbcConnection(string.Format("Dsn={0};dbq={1}", Dsn, pathDatabase));
                        Connection.Open();
                        isConected = true;

                        this.cadenaDeConexion = string.Format("Dsn={0};dbq={1}", Dsn, pathDatabase);
                        return true;
                    }
                    catch (Exception Error)
                    {
                        new HelpLibraryLog(Error, this);

                        return false;
                        throw Error;

                    }
                    finally
                    {
                        Connection.Close();
                        isConected = false;
                    }
                }
                else
                {
                    return false;
                    throw new Exception("No se ha especificado una cadena de connection o una ruta valida, public void Conectar();");
                }
            }
            else
            {
                if (!string.IsNullOrWhiteSpace(this.cadenaDeConexion))
                {
                    try
                    {
                        Connection = new OdbcConnection(CadenaDeConexion);
                        Connection.Open();

                        return true;
                    }
                    catch (Exception Error)
                    {

                        new HelpLibraryLog(Error, this);
                        return false;

                    }
                    finally
                    {
                        Connection.Close();
                    }
                }
                else
                {
                    return false;
                    throw new Exception("No se ha especificado una cadena de connection o una ruta valida, public void Conectar();");
                }

            }

        }

        public async void InsertarAsync(ITable Objeto)
        {

            try
            {
                using (OdbcCommand Comando = InsertToCommand(Objeto, Connection))
                {



                    Connection.Open();
                    isConected = true;
                    await Comando.ExecuteNonQueryAsync();

                }
            }
            catch (OdbcException Error)
            {
                new HelpLibraryLog(Error, this);
                throw Error;
            }

            finally
            {
                Connection.Close();
                isConected = false;

            }






        }

        public async void InsertarAsync(ITable[] Objetos)
        {

            try
            {

                Connection.Open();
                isConected = true;
                for (int i = 0; i < Objetos.Length; i++)
                {
                    using (OdbcCommand Comando = InsertToCommand(Objetos[i], connection))
                    {


                        await Comando.ExecuteNonQueryAsync();
                    }
                }
                Connection.Close();
                isConected = false;
            }
            catch (OdbcException Error)
            {

                new HelpLibraryLog(Error, this);
                throw Error;

            }

            finally
            {
                Connection.Close();
                isConected = false;
            }

        }

        public async void DeleteAsync(ITable Objeto)
        {

            string cmd = string.Format("DELETE FROM {0} WHERE Id = ?", Objeto.Tabla);
            try
            {
                using (OdbcCommand comando = new OdbcCommand(cmd, Connection))
                {
                    OdbcParameter parameter = new OdbcParameter("Id", Objeto.Id);
                    comando.Parameters.Add(parameter);

                    Connection.Open();
                    isConected = true;
                    await comando.ExecuteNonQueryAsync();
                }
            }
            catch (OdbcException Error)
            {
                new HelpLibraryLog(Error, this);
                throw Error;
            }
            finally
            {

                Connection.Close();
                isConected = false;
            }

        }

        public async void DeleteAsync(ITable[] Objetos)
        {

            try
            {
                for (int i = 0; i < Objetos.Length; i++)
                {
                    string cmd = string.Format("DELETE FROM {0} WHERE Id = ?", Objetos[i].Tabla);

                    using (OdbcCommand comando = new OdbcCommand(cmd, Connection))
                    {


                        OdbcParameter parameter = new OdbcParameter("Id", Objetos[i].Id);
                        comando.Parameters.Add(parameter);
                        Connection.Open();
                        isConected = true;
                        await comando.ExecuteNonQueryAsync();

                    }
                }

            }
            catch (OdbcException Error)
            {
                new HelpLibraryLog(Error, this);
                throw Error;
            }
            finally
            {
                Connection.Close();
                isConected = false;

            }

        }

        public async Task<List<T>> ReadAsync<T>(string filtro) where T : ITable, new()
        {





            List<T> retorno = new List<T>();
            T buf = new T();

            string cmd = string.Format("SELECT * FROM {0} WHERE {1}", buf.Tabla, filtro);

            try
            {
                using (OdbcCommand comando = new OdbcCommand(cmd, Connection))
                {
                    Connection.Open();
                    isConected = true;
                    DbDataReader lectura = await comando.ExecuteReaderAsync().ConfigureAwait(false);

                    while (lectura.Read())
                    {

                        T buffer = new T();
                        for (int i = 0; i < buffer.Propiedades.Count; i++)
                        {

                            PropertyAttribute attrib = System.Attribute.GetCustomAttribute(buffer.Propiedades[i], typeof(PropertyAttribute)) as PropertyAttribute;
                            if (attrib != null)
                            {
                                if (attrib.AddToDataBase)
                                {
                                    buffer.Propiedades[i].SetValue(buffer, Convert.ChangeType(lectura[buffer.Propiedades[i].Name], buffer.Propiedades[i].PropertyType));
                                }
                            }
                            else
                            {
                                buffer.Propiedades[i].SetValue(buffer, Convert.ChangeType(lectura[buffer.Propiedades[i].Name], buffer.Propiedades[i].PropertyType));
                            }



                        }

                        retorno.Add(buffer);

                    }

                    return retorno;

                }
            }
            catch (Exception Error)
            {
                new HelpLibraryLog(Error, this);
                return new List<T>();
                throw Error;
            }
            finally
            {
                Connection.Close();
                isConected = false;

            }

        }

        public async Task<List<T>> ReadAsync<T>() where T : ITable, new()
        {





            List<T> retorno = new List<T>();
            T temp = new T();

            string cmd = string.Format("SELECT * FROM {0}", temp.Tabla);

            try
            {
                using (OdbcCommand comando = new OdbcCommand(cmd, Connection))
                {
                    Connection.Open();
                    isConected = true;
                    var lectura = await comando.ExecuteReaderAsync().ConfigureAwait(false);

                    while (lectura.Read())
                    {

                        T buffer = new T();
                        for (int i = 0; i < buffer.Propiedades.Count; i++)
                        {

                            PropertyAttribute attrib = System.Attribute.GetCustomAttribute(buffer.Propiedades[i], typeof(PropertyAttribute)) as PropertyAttribute;
                            if (attrib != null)
                            {
                                if (attrib.AddToDataBase)
                                {
                                    buffer.Propiedades[i].SetValue(buffer, Convert.ChangeType(lectura[buffer.Propiedades[i].Name], buffer.Propiedades[i].PropertyType));
                                }
                            }
                            else
                            {
                                buffer.Propiedades[i].SetValue(buffer, Convert.ChangeType(lectura[buffer.Propiedades[i].Name], buffer.Propiedades[i].PropertyType));
                            }





                        }

                        retorno.Add(buffer);

                    }

                    return retorno;

                }
            }
            catch (Exception Error)
            {

                new HelpLibraryLog(Error, this);
                return new List<T>();
                throw Error;

            }
            finally
            {

                Connection.Close();
                isConected = false;

            }

        }

        public async void UpdateAsyn(ITable Viejo, ITable Nuevo)
        {




            try
            {
                using (OdbcCommand command = UpdateToCommand(Viejo, Nuevo, Connection))
                {
                    Connection.Open();
                    isConected = true;
                    await command.ExecuteNonQueryAsync();

                }
            }
            catch (Exception Error)
            {

                new HelpLibraryLog(Error, this);
                throw Error;
            }
            finally
            {

                Connection.Close();
                isConected = false;
            }

        }

        public async void CreateTable<T>() where T : ITable, new()
        {





            try
            {
                T buffer = new T();
                string cmd = string.Format("CREATE TABLE {0} (", buffer.Tabla);

                for (int i = 0; i < buffer.Propiedades.Count; i++)
                {
                    if (buffer.Propiedades[i].Name != "Tabla" && buffer.Propiedades[i].Name != "Propiedades")
                    {
                        cmd += string.Format("[{0}] {1},", buffer.Propiedades[i].Name, CreateToCommand(buffer.Propiedades[i]));
                    }

                }
                cmd.Remove(cmd.Length - 1);
                cmd += ");";

                using (OdbcCommand comando = new OdbcCommand(cmd, Connection))
                {
                    Connection.Open();
                    isConected = true;
                    await comando.ExecuteNonQueryAsync();


                }

            }
            catch (Exception Error)
            {
                new HelpLibraryLog(Error, this);
                throw Error;
            }

            finally
            {
                Connection.Close();
                isConected = false;
            }



        }

        public async void CreateTable(string cadenaDeConexion, ITable tabla)
        {

            try
            {
                string cmd = string.Format("CREATE TABLE {0} (", tabla.Tabla);

                for (int i = 0; i < tabla.Propiedades.Count; i++)
                {
                    if (tabla.Propiedades[i].Name != "Tabla" && tabla.Propiedades[i].Name != "Propiedades")
                    {
                        if (i == tabla.Propiedades.Count - 1)
                        {
                            cmd += string.Format("[{0}] {1}", tabla.Propiedades[i].Name, CreateToCommand(tabla.Propiedades[i]));
                        }
                        else
                        {
                            cmd += string.Format("[{0}] {1},", tabla.Propiedades[i].Name, CreateToCommand(tabla.Propiedades[i]));
                        }
                    }

                }

                cmd += ");";

                using (OdbcConnection conexionTemp = new OdbcConnection(cadenaDeConexion))
                {
                    using (OdbcCommand comandon = new OdbcCommand(cmd, conexionTemp))
                    {
                        try
                        {
                            conexionTemp.Open();
                            isConected = true;
                            await comandon.ExecuteNonQueryAsync();

                        }
                        catch (Exception Error)
                        {

                            new HelpLibraryLog(Error, this);
                        }
                        finally
                        {
                            conexionTemp.Close();
                            isConected = false;
                        }

                    }
                }
            }
            catch (Exception error)
            {
                new HelpLibraryLog(error, this);
                throw error;
            }

        }

        public async void CreateTable(OdbcConnection cadenaDeConexion, ITable tabla)
        {

            try
            {
                string cmd = string.Format("CREATE TABLE {0} (", tabla.Tabla);

                for (int i = 0; i < tabla.Propiedades.Count; i++)
                {
                    if (tabla.Propiedades[i].Name != "Tabla" && tabla.Propiedades[i].Name != "Propiedades")
                    {
                        if (i == tabla.Propiedades.Count - 1)
                        {
                            cmd += string.Format("[{0}] {1}", tabla.Propiedades[i].Name, CreateToCommand(tabla.Propiedades[i]));
                        }
                        else
                        {
                            cmd += string.Format("[{0}] {1},", tabla.Propiedades[i].Name, CreateToCommand(tabla.Propiedades[i]));
                        }
                    }

                }

                cmd += ");";

                try
                {
                    using (OdbcCommand comandon = new OdbcCommand(cmd, cadenaDeConexion))
                    {

                        cadenaDeConexion.Open();
                        isConected = true;
                        await comandon.ExecuteNonQueryAsync();


                    }
                }
                catch (Exception Error)
                {
                    new HelpLibraryLog(Error, this);
                    throw Error;
                }
                finally
                {
                    cadenaDeConexion.Close();
                    isConected = false;
                }



            }
            catch (Exception Error)
            {
                new HelpLibraryLog(Error, this);
                throw Error;

            }
            finally
            {
                cadenaDeConexion.Close();
            }

        }

        public async void CreateCampo(string tabla, PropertyInfo campo)
        {
            string cmd = string.Format("ALTER TABLE {0} ADD {1} {2};", tabla, campo.Name, CreateToCommand(campo));
            try
            {
                using (OdbcCommand comando = new OdbcCommand(cmd, Connection))
                {

                    Connection.Open();
                    isConected = true;
                    await comando.ExecuteNonQueryAsync();
                }
            }
            catch (Exception Error)
            {
                new HelpLibraryLog(Error, this);
                throw Error;
            }
            finally
            {
                Connection.Close();
                isConected = false;
            }



        }

        public void NormalizeDatabase(params ITable[] Tablas)
        {
            try
            {



                for (int i = 0; i < Tablas.Length; i++)
                {
                    NormalizeTable(Tablas[i]);
                }





            }
            catch (Exception Error)
            {
                new HelpLibraryLog(Error, this);
                throw Error;
            }
            finally
            {
                this.Connection.Close();
                isConected = false;
            }
        }

        public void NormalizeTable(ITable modelo)
        {

            try
            {
                if (TableExists(modelo))
                {
                    foreach (PropertyInfo item in modelo.Propiedades)
                    {

                        if (!CampoExist(modelo, item))
                        {
                            CreateCampo(modelo.Tabla, item);
                        }


                    }

                }
                else
                {
                    CreateTable(this.Connection, modelo);
                }


            }
            catch (Exception Error)
            {
                new HelpLibraryLog(Error, this);
                throw Error;
            }






        }




        #endregion